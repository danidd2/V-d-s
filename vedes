#include <iostream>
#include <string>
#include <fstream>
#include <vector>
#include <sstream>
#include <cstdlib>
#include <map>
#include <algorithm>
#include <set>
#include <iterator>
#include <boost/algorithm/string/split.hpp>
#include <boost/algorithm/string.hpp>
#include <iomanip>

bool isExist(const std::string fileName);
std::vector<std::vector<std::string>> readFile(const std::string datab);
std::string getPropsFile(const std::string path);
int getPoints(const std::string path);
std::string getJegy(std::string s);
std::multimap<std::string, std::string> getVedes(const std::vector<std::vector<std::string>> database);
std::multimap<std::string, int> getJegyek(std::multimap<std::string, std::string> vedesek);

int main(int argc, char** argv){

  std::vector<std::vector<std::string>> database =  readFile(argv[1]);
  std::vector<std::string> vTemp;

  std::string kapcsolo = argv[2];
  std::string temp, name;

  std::set<std::string> osszesFeladat;
  std::map<std::string, int> pontok, legnagyobb, vegsoJegyek;
  std::multimap<int, std::string> forditva;
  std::multimap<std::string, std::string> vedesek = getVedes(database), hallgatoFeladat;
  std::multimap<std::string, int> jegyek = getJegyek(vedesek);

  int i = 0, osszesPont;

  for(i = 0; i < database.size(); i++){
    pontok[database[i][0]] = 0;
    hallgatoFeladat.insert(std::pair<std::string, std::string>(database[i][0], database[i][1]));
  }

  for(auto const& feladat: hallgatoFeladat){
    pontok[feladat.first] += getPoints(feladat.second);
  }

  for(auto const& value: pontok){
    forditva.insert(std::pair<int, std::string>(value.second, value.first));
  }

  i = 0;
  int top = 20;

  if(kapcsolo == "--pont"){
    if(argv[3]){
      top = std::stoi(argv[3]);
   }

    for(auto value = forditva.rbegin(); value != forditva.rend(); ++value){
      std::cout << i + 1 << ": " << value->second << ": " << value->first << std::endl;
      if(i == top - 1)
      break;
      i++;
    }
  }

  else if(kapcsolo == "--trad-lab-mark"){

  	std::vector<int> osszesVedes, osszesJegy;

    for(auto const& vedes: jegyek){
      if(vegsoJegyek.find(vedes.first) != vegsoJegyek.end()){
        vegsoJegyek[vedes.first] += vedes.second;
      } else {
        vegsoJegyek[vedes.first] = vedes.second;
      }
    }
    double atlag;
    double vedesSzam;
    for(int i = 5; i > 1; i--)
      for(auto const& vedes: vegsoJegyek){
      	 osszesJegy.push_back(vedes.second);
      	 osszesVedes.push_back(jegyek.count(vedes.first));
         atlag = double(vedes.second)/double(jegyek.count(vedes.first));
         vedesSzam = double(jegyek.count(vedes.first));
         if(atlag - std::trunc(atlag) > 0.5){
           atlag = round(atlag);
         }
        else {
           atlag = floor(atlag);
        }
        if(atlag == i)
          std::cout << vedes.first << " " << atlag << " " << vedesSzam << std::endl;

  }

    double jegyek = std::accumulate(osszesJegy.begin(), osszesJegy.end(), 0.0);
    double vedesek = std::accumulate(osszesVedes.begin(), osszesVedes.end(), 0.0);
   	std::cout << jegyek/vedesek << std::endl;
  }


  else if(kapcsolo == "--name"){
     name = argv[3];
     name += ' ';
     name += argv[4];
     std::cout << name << std::endl;
     osszesPont = 0;
     for(auto const& feladat: hallgatoFeladat){
       if(feladat.first == name){
         if(getPoints(feladat.second) > 0)
         std::cout << feladat.second << ' ' << getPoints(feladat.second) << std::endl;
         osszesPont += getPoints(feladat.second);
       }
     }
     std::cout << "Osszes pont: " << osszesPont << std::endl;
   }
 }


std::multimap<std::string, int> getJegyek(std::multimap<std::string, std::string> vedesek){
  std::multimap<std::string, int> jegyek, mTemp;
  std::map<std::string, int> legnagyobb;
  std::string temp;
  std::vector<std::string> vTemp;
  for(int i = 1; i < 4; i++){
    for(auto const& vedes: vedesek){
      std::stringstream ss(vedes.second);
      while(getline(ss, temp, ' ')){
        vTemp.push_back(temp);
      }
      if((std::stoi(vTemp[0]) == i) && (legnagyobb.find(vedes.first) == legnagyobb.end())){
        jegyek.insert(std::pair<std::string, int>(vedes.first, std::stoi(vTemp[1])));
        legnagyobb[vedes.first] = std::stoi(vTemp[1]);
      } else if((std::stoi(vTemp[0]) == i) && !((legnagyobb.find(vedes.first)) == legnagyobb.end())){
        if(legnagyobb[vedes.first] <= std::stoi(vTemp[1])) {
          for(auto const& jegy: jegyek){
            if((jegy.first == vedes.first) && (jegy.second == legnagyobb[vedes.first])){
              for(auto const& jegy: jegyek)
                if(jegy.first == vedes.first)
                  mTemp.insert(std::pair<std::string,int>(vedes.first, std::stoi(vTemp[1])));
              legnagyobb.erase(vedes.first);
              legnagyobb[vedes.first] = std::stoi(vTemp[0]);
              jegyek.erase(vedes.first);
              for(auto const& vedes: mTemp)
                jegyek.insert(std::pair<std::string, int>(vedes.first, std::stoi(vTemp[1])));
              mTemp.erase(vedes.first);
            }

          }
        }
      }
      vTemp.clear();
    }

    legnagyobb.erase(legnagyobb.begin(), legnagyobb.end());
  }
  return jegyek;
}

std::multimap<std::string, std::string> getVedes(const std::vector<std::vector<std::string>> database)
{
  std::multimap<std::string, std::string> vedesek;
  std::string sTemp;
  std::vector<std::string> vTemp;

  for(int i = 0; i < database.size(); i++){
    std::stringstream ss(database[i][1]);
    while(getline(ss, sTemp, '/')){
      vTemp.push_back(sTemp);
    }
    if(vTemp[vTemp.size() - 3] == "Védés"){
      vedesek.insert(std::pair<std::string, std::string>(database[i][0], getJegy(database[i][1].substr(database[i][1].find("Védés") + 8))));
    }
  }
  return vedesek;
}

std::string getJegy(std::string s){
  std::stringstream ss(s);
  std::string sTemp, vedes;
  std::vector<std::string> vTemp;
  while(getline(ss, sTemp, '/')){
    vTemp.push_back(sTemp);
  }
  if(vTemp[0] == "I")
    vedes = "1";
  else if(vTemp[0] == "II")
    vedes = "2";
  else if(vTemp[0] == "III")
    vedes = "3";

  if(vTemp[1] == "elégtelen")
    return vedes + " 1";
  if(vTemp[1] == "elégséges")
    return vedes + " 2";
  else if(vTemp[1] == "közepes")
    return vedes + " 3";
  else if(vTemp[1] == "jó")
    return vedes + " 4";
  else if(vTemp[1] == "jeles")
    return vedes + " 5";
}

int getPoints(const std::string path) {
  if(!(path.find("Esport") != std::string::npos)){
    int pont = 0, i;
    char ch;
    std::string fileName = getPropsFile(path), temp, temp2;
    std::vector<std::string> vTemp;
    if(isExist(fileName)){
      std::ifstream data(fileName);
      while(data.get(ch)){
        if(ch == '\n'){
          std::stringstream ss(temp);
          while(getline(ss, temp2, ' ')){
            vTemp.push_back(temp2);
          }
          i = vTemp.size() - 1;
          while(vTemp[i] == "" || vTemp[i] == "	"){
            i--;
          }

          pont += std::stoi(vTemp[i]);

          vTemp.clear();
          temp = "";
        }
         else {
          if(ch != '\"')
            temp += ch;
        }
      }
    }
    return pont;
  }
  return 0;
}

std::string getPropsFile(const std::string path){
  std::string props, temp;
  std::stringstream ss(path);
  std::vector<std::string> v;
  while(getline(ss, temp, '/')){
    v.push_back(temp);
  }
  props = path + "/" + v[v.size() - 1] + ".props";

  return props;
}

std::vector<std::vector<std::string>> readFile(const std::string datab){
  std::ifstream data(datab);
  std::string temp;
  std::vector<std::vector<std::string>> database;
  std::vector<std::string> vTemp, vTemp2;
  while(std::getline(data, temp)){
  	  	boost::split(vTemp2, temp, boost::is_any_of(","));
  	  	for(auto value: vTemp2){
  	  		vTemp.push_back(value.substr(1, value.length() - 2));
  	  	}

       	database.push_back(vTemp);
       	vTemp.clear();
     }

  	return database;
 }


bool isExist(const std::string fileName){
  std::ifstream infile(fileName);
  return infile.good();
}
